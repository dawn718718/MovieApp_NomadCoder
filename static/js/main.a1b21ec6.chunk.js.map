{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","large_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callAPI","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTA2CA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAOC,EAAMF,EAANE,IACzB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAKtD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACAR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAuBpBC,MAhEf,SAAAC,GAAgD,IAAhCN,EAAgCM,EAAhCN,MAAMN,EAA0BY,EAA1BZ,OAAOa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACjC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SAEXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAItCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAE9Dd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACVO,MC4CNI,6MA7DbC,MAAO,KAMTC,cAAiB,WAad,OAZeC,EAAKF,MAAMG,OAAOP,IAAI,SAAAQ,GAEnC,OACArB,EAAAC,EAAAC,cAACoB,EAAD,CACClB,MAAOiB,EAAME,cACbzB,OAAQuB,EAAMG,kBACdT,IAAKM,EAAMI,GACXd,OAAQU,EAAMV,OACdC,SAAUS,EAAMT,gBAQtBc,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAGVf,EAAKgB,SAAS,CACbf,WAJS,wBAAAU,EAAAM,SAAAT,EAAAU,WAQXJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SAEtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAjC1BP,KAAKX,8CAoCD,IACEN,EAAWiB,KAAKpB,MAAhBG,OACR,OACEpB,EAAAC,EAAAC,cAAA,OAAKG,UAAWe,EAAS,MAAQ,gBAC9BA,EAAQiB,KAAKnB,gBAAkB,kBA7CpB6B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.a1b21ec6.chunk.js","sourcesContent":["\n//컴포넌트식이 아닌 함수형으로 그려줄수도 있음.\n//state도 필요없고 인자로 사용할 단순히 하나의 prop과 리턴해서 그려줄 하나의 html태그만 필요.\n//라이프사이클도 없음. \n\nimport React from 'react';\nimport PropTypes from 'prop-types'; //yarn add prop-types 를 콘솔에서 추가 설치 해준 후 \n//import LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\n\nfunction Movie({title,poster,genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            {/* 포스터 이미지 넣을 컬럼 */}\n            <div className=\"Movie_Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n\n            {/* 제목, 장르, 시놉시스 넣을 컬럼 */}\n            <div className=\"Movie_Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie_Genres\"> \n                 {genres.map((genre, index) => <MovieGenre genre={genre} key={index} /> )}\n                </div>\n                <div className=\"Movie_Synopsis\">\n                    {synopsis}\n                    {/* <LinesEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                    />*/}\n                </div> \n            </div>\n\n             \n        </div>\n    )\n}\n\n//함수 형태의 컴포넌트로 MoviePoster를 정의하고 인자로 poster를 받아서, 이 값을 이미지에 src로 정의\nfunction MoviePoster({poster,alt}) {\n    return (\n    <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\" />\n    )\n}\n\n//함수 형태의 컴포넌트로 Movie_Genres를 정의하고 인자로 genre라는 prop을 받아서, 이 값을  span 테그안에 값으로 넣어줌\nfunction MovieGenre({genre}){\n    return (\n    <span className=\"Movie_Genre\">{genre}</span>\n    )\n} \n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    //아래 두가지의 프롭 들을 추가함 #17\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\n//MoviePoster라는 함수형 컴포넌트의 prop타입을 지정 및 필수값으로 설정\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\n//MovieGenre 라는 함수형 컴포넌트의 prop타입을 지정 및 필수값으로 설정\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie;\n\n/*\n1. react를 import하고\n2. 컴포넌트로 처리할 아이를 이름을 정해 클래스를 정의하고, 컴포넌트로 정의하고\n2. render 함수 내에  <- 그려줄 JSX를 return할 것\n3. 만들어진 컴포넌트를 다른 컴포넌트에 넣기 (예. Movie를 App에 넣기)\n*/","//최종버전: async() 와 await을 사용하여 비동기 방식으로 API 데이터 가져옴.\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'; //Movie라는 컴포넌트를 가져옴\n\n\nclass App extends Component {\n\n  state ={}\n                \n  componentDidMount(){ \n    this._getMovies();\n  }\n\n_renderMovies =  () => {\n   const movies = this.state.movies.map(movie => {\n     //console.log(movie)\n     return (\n     <Movie \n      title={movie.title_english}\n      poster={movie.large_cover_image}\n      key={movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis}  \n     />\n     );\n   });\n   return movies\n}\n\n//async와 await은 같이 쓰여야함. \n_getMovies = async () => {\n  const movies = await this._callAPI(); //await 모드로 _callAPI함수 결과를 저장함. \n  //즉, 리턴값이 무엇이던간에 반드시 callAPI()리턴값을 받아야만 다음으로 넘어감. \n   this.setState({\n    movies\n   });\n  };\n\n  _callAPI = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download count')\n    .then(potato => potato.json()) \n    //.then(json => console.log(json)) \n    .then(json => json.data.movies)\n    .catch(err => console.log(err)) \n  }\n\nrender(){\n  const { movies } = this.state; //movies라는 아이는 이 컴포넌트 내의 state에 정의된 애다를 대신 표현\n  return (\n    <div className={movies ? \"App\" : \"App--loading\"}>\n      {movies? this._renderMovies() : \"Loading\"}\n    </div>\n  )\n}\n\n\n  // render() {\n  //   return (\n  //     <div className=\"App\">\n  //       {this.state.movies ? this._renderMovies() : 'Loading'}\n  //     </div>\n  //   );\n  // }\n\n\n}\n\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; //app 이라는 컴포넌트를 가지고 옴\nimport * as serviceWorker from './serviceWorker';\n\n//해석 : reactDom이 그려준다 / App (app.js) 이라는 컴포넌트를 / public 폴더 내 html 문서에서 아이디가 root인 요소내에\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n/*\n react: UI 라이브러리를 그려주는 라이브러리\n reactDom: 리액트를 웹사이트에 그려주는 도구. 한개의 컴포넌트를 render함. \n reactNative: 리액트를 모바일앱게 그려주는 도구\n*/\nserviceWorker.unregister();\n"],"sourceRoot":""}